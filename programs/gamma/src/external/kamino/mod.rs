// From the kamnio IDL we have removed the refreshReservesBatch instruction, as the lifetime was not being used in that and it was failing to generate the CPI crate.
// Here is the removed instruction:
//  {
// "name": "refreshReservesBatch",
// "accounts": [],
// "args": [
//   {
//     "name": "skipPriceUpdates",
//     "type": "bool"
//   }
// ]
// }
// This should not cause any issues for making the cpi calls for other instructions.

mod collateral_exchange_rate;
mod fraction;
use crate::borsh::BorshDeserialize;
use collateral_exchange_rate::CollateralExchangeRate;
use fraction::Fraction;

pub struct KaminoProgram;

impl Id for KaminoProgram {
    fn id() -> Pubkey {
        crate::external::kamino::kamino::ID
    }
}
anchor_lang::declare_program!(kamino);

use anchor_lang::prelude::*;

/*
Read specific data from account instead of deseralizing the account, as the account is very large and deserializing it will fill up the solana stack size.
We also can't use AccountLoader(zero_copy) as the declare_program macro does not support it.
*/
const AVAILABLE_AMOUNT_OFFSET: usize = 224;
const BORROWED_AMOUNT_OFFSET: usize = 232;
const ACCUMULATED_PROTOCOL_FEES_OFFSET: usize = 344;
const ACCUMULATED_REFERER_FEES_OFFSET: usize = 360;
const PENDING_REFERER_FEES_OFFSET: usize = 376;

const MINT_TOTAL_SUPPLY_OFFSET: usize = 2592;

fn total_supply(account_info: &AccountInfo) -> Result<Fraction> {
    let account_data = account_info.data.borrow();
    // TODO: find the current data locations.

    let available_amount =
        u64::try_from_slice(&account_data[AVAILABLE_AMOUNT_OFFSET..AVAILABLE_AMOUNT_OFFSET + 8])?;
    let borrowed_amount_sf =
        u128::try_from_slice(&account_data[BORROWED_AMOUNT_OFFSET..BORROWED_AMOUNT_OFFSET + 16])?;
    let accumulated_protocol_fees_sf = u128::try_from_slice(
        &account_data[ACCUMULATED_PROTOCOL_FEES_OFFSET..ACCUMULATED_PROTOCOL_FEES_OFFSET + 16],
    )?;
    let accumulated_referrer_fees_sf = u128::try_from_slice(
        &account_data[ACCUMULATED_REFERER_FEES_OFFSET..ACCUMULATED_REFERER_FEES_OFFSET + 16],
    )?;
    let pending_referrer_fees_sf = u128::try_from_slice(
        &account_data[PENDING_REFERER_FEES_OFFSET..PENDING_REFERER_FEES_OFFSET + 16],
    )?;

    Ok(
        Fraction::from(available_amount) + Fraction::from_bits(borrowed_amount_sf)
            - Fraction::from_bits(accumulated_protocol_fees_sf)
            - Fraction::from_bits(accumulated_referrer_fees_sf)
            - Fraction::from_bits(pending_referrer_fees_sf),
    )
}

fn collateral_exchange_rate(account_info: &AccountInfo) -> Result<CollateralExchangeRate> {
    let total_liquidity = total_supply(account_info)?;

    let account_data = account_info.data.borrow();
    let mint_total_supply =
        u64::try_from_slice(&account_data[MINT_TOTAL_SUPPLY_OFFSET..MINT_TOTAL_SUPPLY_OFFSET + 8])?;
    let rate = if mint_total_supply == 0 || total_liquidity == Fraction::ZERO {
        Fraction::ONE
    } else {
        Fraction::from(mint_total_supply) / total_liquidity
    };
    Ok(CollateralExchangeRate(rate))
}

pub fn collateral_to_liquidity(account_info: &AccountInfo, collateral_amount: u64) -> Result<u64> {
    let collateral_exchange_rate = collateral_exchange_rate(account_info)?;
    Ok(collateral_exchange_rate.collateral_to_liquidity(collateral_amount))
}

pub fn liquidity_to_collateral(account_info: &AccountInfo, liquidity_amount: u64) -> Result<u64> {
    let collateral_exchange_rate = collateral_exchange_rate(account_info)?;
    Ok(collateral_exchange_rate.liquidity_to_collateral(liquidity_amount))
}

#[cfg(test)]
mod test {
    use super::*;
    use base64::{engine::general_purpose, Engine as _};
    use serde_json::Value;

    /*
    The data for the test are comming from solscan and the json is from the following command:
    solana account d4A2prbA2whesmvHaL88BH6Ewn5N4bTSU2Ze8P6Bc4Q   --output json-compact

    The aim for the test is to make sure we are reading the correct places in the account data to get the correct values.
     */
    pub fn get_raw_data() -> Vec<u8> {
        let json_data: Value = serde_json::from_str(
            r#"{"account":{"data":["","base64"],"executable":false,"lamports":60913920,"owner":"KLend2g3cP87fffoy8q1mQqGKjrxjC8boSyAYavgmjD","rentEpoch":18446744073709551615,"space":8624},"pubkey":"d4A2prbA2whesmvHaL88BH6Ewn5N4bTSU2Ze8P6Bc4Q"}"#).unwrap();

        general_purpose::STANDARD
            .decode(
                (json_data["account"].as_object().unwrap())["data"]
                    .as_array()
                    .unwrap()[0]
                    .as_str()
                    .unwrap(),
            )
            .unwrap()
    }

    #[test]
    fn available_amount_offset() {
        dbg!(get_raw_data()[AVAILABLE_AMOUNT_OFFSET..AVAILABLE_AMOUNT_OFFSET + 8].to_vec());

        let available_amount = u64::try_from_slice(
            &get_raw_data()[AVAILABLE_AMOUNT_OFFSET..AVAILABLE_AMOUNT_OFFSET + 8],
        )
        .unwrap();
        let expected_value: u64 = 214566956582243;
        assert_eq!(expected_value, available_amount);
    }

    #[test]
    fn borrowed_amount_sf_offset() {
        let borrowed_amount_sf = u128::try_from_slice(
            &get_raw_data()[BORROWED_AMOUNT_OFFSET..BORROWED_AMOUNT_OFFSET + 16],
        )
        .unwrap();
        assert_eq!(borrowed_amount_sf, 2776737991105023594056605513634105);
    }

    #[test]
    fn accumulated_protocol_fees_sf_offset() {
        let accumulated_protocol_fees_sf = u128::try_from_slice(
            &get_raw_data()
                [ACCUMULATED_PROTOCOL_FEES_OFFSET..ACCUMULATED_PROTOCOL_FEES_OFFSET + 16],
        )
        .unwrap();
        assert_eq!(accumulated_protocol_fees_sf, 136309464382156328829637428678);
    }

    #[test]
    fn accumulated_referrer_fees_sf_offset() {
        let accumulated_referrer_fees_sf = u128::try_from_slice(
            &get_raw_data()[ACCUMULATED_REFERER_FEES_OFFSET..ACCUMULATED_REFERER_FEES_OFFSET + 16],
        )
        .unwrap();
        assert_eq!(accumulated_referrer_fees_sf, 0);
    }

    #[test]
    fn pending_referrer_fees_sf_offset() {
        let pending_referrer_fees_sf = u128::try_from_slice(
            &get_raw_data()[PENDING_REFERER_FEES_OFFSET..PENDING_REFERER_FEES_OFFSET + 16],
        )
        .unwrap();
        assert_eq!(pending_referrer_fees_sf, 0);
    }

    #[test]
    fn mint_total_supply_offset() {
        let mint_total_supply = u64::try_from_slice(
            &get_raw_data()[MINT_TOTAL_SUPPLY_OFFSET..MINT_TOTAL_SUPPLY_OFFSET + 8],
        )
        .unwrap();
        assert_eq!(mint_total_supply, 2485328372763066);
    }
}
